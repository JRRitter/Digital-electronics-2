
02-leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a0  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	PORTC = PORTC & ~(1<<LED_RED);
	*/
	
	/* pushbutton */
	// Setting pin PD0 to input
	DDRD = DDRD & ~(1<<PUSHBTN);
  80:	50 98       	cbi	0x0a, 0	; 10
	// ...and enabling internal pull-up resistor
	PORTD = PORTD | (1<<PUSHBTN);
  82:	58 9a       	sbi	0x0b, 0	; 11
	
	//Setting pins to output
	DDRC = DDRC | 31; // 0001 1111
  84:	87 b1       	in	r24, 0x07	; 7
  86:	8f 61       	ori	r24, 0x1F	; 31
  88:	87 b9       	out	0x07, r24	; 7
	//Turning off LEDs (active low)
	PORTC = PORTC | 31;// 0001 1111
  8a:	88 b1       	in	r24, 0x08	; 8
  8c:	8f 61       	ori	r24, 0x1F	; 31
  8e:	88 b9       	out	0x08, r24	; 8
		while (bit_is_clear(PIND,PUSHBTN))
		{
			for (int i = 0; i < 5; i++)
			{
				_delay_ms(BLINK_DELAY);
				PORTC = ~(1<<i); // setting only one led on
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
			}
			for (int i = 0; i < 5; i++)
			{
				_delay_ms(BLINK_DELAY);
				PORTC = ~(16>>i); // setting only one led on
  94:	40 e1       	ldi	r20, 0x10	; 16
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	3c c0       	rjmp	.+120    	; 0x112 <main+0x92>
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	34 e3       	ldi	r19, 0x34	; 52
  a2:	ec e0       	ldi	r30, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	e0 40       	sbci	r30, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
		while (bit_is_clear(PIND,PUSHBTN))
		{
			for (int i = 0; i < 5; i++)
			{
				_delay_ms(BLINK_DELAY);
				PORTC = ~(1<<i); // setting only one led on
  b0:	9b 01       	movw	r18, r22
  b2:	08 2e       	mov	r0, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x3a>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x36>
  be:	20 95       	com	r18
  c0:	28 b9       	out	0x08, r18	; 8
		
		
		// Knight Rider application
		while (bit_is_clear(PIND,PUSHBTN))
		{
			for (int i = 0; i < 5; i++)
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	85 30       	cpi	r24, 0x05	; 5
  c6:	91 05       	cpc	r25, r1
  c8:	51 f7       	brne	.-44     	; 0x9e <main+0x1e>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	34 e3       	ldi	r19, 0x34	; 52
  d2:	ec e0       	ldi	r30, 0x0C	; 12
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	e0 40       	sbci	r30, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
				PORTC = ~(1<<i); // setting only one led on
			}
			for (int i = 0; i < 5; i++)
			{
				_delay_ms(BLINK_DELAY);
				PORTC = ~(16>>i); // setting only one led on
  e0:	9a 01       	movw	r18, r20
  e2:	08 2e       	mov	r0, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x6a>
  e6:	35 95       	asr	r19
  e8:	27 95       	ror	r18
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x66>
  ee:	20 95       	com	r18
  f0:	28 b9       	out	0x08, r18	; 8
			for (int i = 0; i < 5; i++)
			{
				_delay_ms(BLINK_DELAY);
				PORTC = ~(1<<i); // setting only one led on
			}
			for (int i = 0; i < 5; i++)
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	51 f7       	brne	.-44     	; 0xce <main+0x4e>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	34 e3       	ldi	r19, 0x34	; 52
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
			{
				_delay_ms(BLINK_DELAY);
				PORTC = ~(16>>i); // setting only one led on
			}
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | 31;// turning off leds
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	8f 61       	ori	r24, 0x1F	; 31
 110:	88 b9       	out	0x08, r24	; 8
		}
        */
		
		
		// Knight Rider application
		while (bit_is_clear(PIND,PUSHBTN))
 112:	48 99       	sbic	0x09, 0	; 9
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x92>
 116:	c1 cf       	rjmp	.-126    	; 0x9a <main+0x1a>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
